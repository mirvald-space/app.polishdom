---
description: 
globs: 
alwaysApply: true
---
# Правила проекта для Cursor IDE

## Основные принципы

1. **DRY (Don't Repeat Yourself)** - не дублируй код
2. **Единая точка истины** - для каждого типа логики должен быть только один источник
3. **Переиспользование** - любой компонент, функция или утилита должна быть создана с учетом возможности переиспользования

## Проверка перед созданием нового кода

Перед созданием новой функции, компонента или утилиты:

1. **Проверь существующие файлы**:
   - `lib/utils.ts` - общие утилиты
   - `lib/api.ts` - работа с внешними API
   - `components/shared/` - переиспользуемые компоненты

2. **Используй поиск по коду**:
   ```bash
   # Найти все компоненты с определенной функциональностью
   grep -r "function useAudio" .
   
   # Найти все функции для работы с API
   grep -r "async function" --include="*.ts" ./lib
   ```

3. **Проверь соответствующие директории**:
   - Все утилиты должны быть в `lib/`
   - Общие компоненты - в `components/shared/`
   - UI элементы - в `components/ui/`

## Структура проекта

```
app.polishdom/
├── app/                  # Маршруты и API endpoints Next.js
│   ├── (preview)/        # Публичные страницы
│   ├── api/              # API маршруты
│   │   ├── generate-xxx/ # Маршруты для генерации контента
├── components/           # Компоненты React
│   ├── shared/           # Переиспользуемые компоненты
│   ├── ui/               # Базовые UI компоненты
├── lib/                  # Утилиты и функции
│   ├── prompts/          # Промпты для AI
│   ├── api.ts            # Клиенты для внешних API
│   ├── utils.ts          # Общие утилиты
│   ├── schemas.ts        # Схемы валидации
```

## Правила для кода

### API маршруты

1. Используй класс `XAIClient` для запросов к x.ai API
2. Используй класс `OpenAIClient` для запросов к OpenAI API
3. Используй `formatErrorResponse` для обработки ошибок
4. Используй `createApiResponse` для создания стандартных ответов

```typescript
// Правильно ✅
import { XAIClient, createApiResponse } from '@/lib/api';
import { formatErrorResponse } from '@/lib/utils';

try {
  const data = await XAIClient.chatCompletions(messages, options);
  return createApiResponse(data);
} catch (error) {
  return formatErrorResponse(error, 500, "Сообщение об ошибке");
}

// Неправильно ❌
try {
  const response = await fetch("https://api.x.ai/v1/chat/completions", {
    // повторяющиеся заголовки и настройки
  });
  return new Response(JSON.stringify(data), { 
    headers: { "Content-Type": "application/json" } 
  });
} catch (error) {
  return new Response(JSON.stringify({ error: "Ошибка" }), { status: 500 });
}
```

### Компоненты

1. Используй компоненты из `components/shared/` для общей функциональности
2. Используй хуки для переиспользуемой логики

```tsx
// Правильно ✅
import { AudioButton } from '@/components/shared/audio-utils';

function MyComponent() {
  return <AudioButton word="привет" />;
}

// Неправильно ❌
function MyComponent() {
  // Дублирование логики AudioButton
  const [isLoading, setIsLoading] = useState(false);
  // ...много кода...
  
  return <button onClick={handleClick}>Play</button>;
}
```

## Работа с состоянием и эффектами

1. Используй кастомные хуки для переиспользуемой логики
2. Соблюдай правила очистки в `useEffect`

```tsx
// Правильно ✅
import { useAudio } from '@/components/shared/audio-utils';

function MyComponent() {
  const { play, pause } = useAudio(url);
}

// Неправильно ❌
function MyComponent() {
  useEffect(() => {
    const audio = new Audio(url);
    // Отсутствует очистка
  }, [url]);
}
```

## Обработка ошибок

1. Используй `try/catch` для асинхронных операций
2. Логируй ошибки перед возвратом пользователю
3. Используй toast для уведомлений

```tsx
// Правильно ✅
try {
  await someAsyncFunction();
} catch (error) {
  console.error("Error:", error);
  toast.error("Что-то пошло не так");
}
```

## Прежде чем написать новый код

1. Спроси себя: "Может ли это быть переиспользовано?"
2. Если да - поместите в соответствующий общий модуль
3. Если нет, но содержит типичную логику - выделите общие части

## Проверки перед коммитом

1. Проверь дублирование кода
2. Убедись, что все утилиты находятся в правильных местах
3. Удали закомментированный или неиспользуемый код 